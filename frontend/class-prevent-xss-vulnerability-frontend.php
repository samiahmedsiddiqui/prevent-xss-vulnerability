<?php
/**
 * @package PreventXSSVulnerability
 */

class Prevent_XSS_Vulnerability_Frontend
{

    /**
     * Initialize WordPress init Hook
     */
    public function init()
    {
        $this->prevent_xss_vulnerability();

        add_action( 'wp', array( $this, 'escape_html' ) );
        add_action( 'wp_enqueue_scripts', array( $this, 'self_xss_script' ), 100 );
    }

    /**
     * Encode and remove the Entiites in Page URI and match with Original URI.
     * If both doesn't match so, it redirects the user to the Encoded
     * and Removed URI.
     *
     * @access private
     * @since 0.1
     * @updated 0.3.5
     *
     * @return void
     */
    private function prevent_xss_vulnerability()
    {
        $reflected_xss_settings = get_option(
            'prevent_xss_vulnerability_reflected_settings'
        );

        if ( is_string( $reflected_xss_settings ) ) {
            $reflected_xss_settings = unserialize( $reflected_xss_settings );
        }

        if ( ! isset( $reflected_xss_settings ) || empty( $reflected_xss_settings )
          || (
              1 != $reflected_xss_settings['enable_encoding']
              && 1 != $reflected_xss_settings['enable_blocking']
          )
        ) {
            return;
        }

        $get_page_uri  = $_SERVER['REQUEST_URI'];
        $xss_detection = $get_page_uri;

        if ( 1 == $reflected_xss_settings['enable_encoding'] ) {

          $encode_params = array(
              ' ',
              '!',
              '"',
              '% ',
              "'",
              '(',
              ')',
              '*',
              '<',
              '>',
              '`',
              '^',
              '[',
              ']',
              '{',
              '|',
              '}',
          );

          $encode_values = array(
              '%20', // Space Encoded Value
              '%21', // ! Encoded Value
              '%22', // " Encoded Value
              '%25', // % Encoded Value
              '%27', // ' Encoded Value
              '%28', // ( Encoded Value
              '%29', // ) Encoded Value
              '%2A', // * Encoded Value
              '%3C', // < Encoded Value
              '%3E', // > Encoded Value
              '%60', // ` Encoded Value
              '%5E', // ^ Encoded Value
              '%5B', // [ Encoded Value
              '%5D', // ] Encoded Value
              '%7B', // { Encoded Value
              '%7C', // | Encoded Value
              '%7D', // } Encoded Value
          );

          if ( isset( $reflected_xss_settings['exclude_encode_entities'] )
              && ! empty( $reflected_xss_settings['exclude_encode_entities'] )
          ) {
            $exclude_encoded_entities = preg_replace( '/\s+/', '',
                $reflected_xss_settings['exclude_encode_entities']
            );
            $exclude_encoded_entities = explode( ',', $exclude_encoded_entities );
            $count_encoded_entities   = count( $exclude_encoded_entities );
            $i = 0;
            while ( $i < $count_encoded_entities ) {
                $key = array_search( $exclude_encoded_entities[$i], $encode_params );
                $exclude_encode_keys[$key] = $key;
                $i++;
            }

            $encode_params = array_diff_key( $encode_params, $exclude_encode_keys );
            $encode_values = array_diff_key( $encode_values, $exclude_encode_keys );
          }

          $xss_detection = str_replace( $encode_params, $encode_values, $xss_detection );
        }
        if ( 1 == $reflected_xss_settings['enable_blocking'] ) {

          $remove_xss_params = array(
              '<',
              '>',
              '(',
              ')',
              '[',
              ']',
              '{',
              '|',
              '}',
          );

          $remove_xss_values = array(
              '%3C',
              '%3E',
              '%28',
              '%29',
              '%5B',
              '%5D',
              '%7B',
              '%7C',
              '%7D',
          );

          if ( isset( $reflected_xss_settings['exclude_block_entities'] )
              && ! empty( $reflected_xss_settings['exclude_block_entities'] )
          ) {
            $exclude_blocked_entities = preg_replace( '/\s+/', '',
                $reflected_xss_settings['exclude_block_entities']
            );
            $exclude_blocked_entities = explode( ',', $exclude_blocked_entities );
            $count_blocked_entities   = count( $exclude_blocked_entities );
            $i = 0;

            while ( $i < $count_blocked_entities ) {
                $key = array_search( $exclude_blocked_entities[$i], $remove_xss_params );
                $exclude_block_keys[$key] = $key;
                $i++;
            }

            $remove_xss_params = array_diff_key( $remove_xss_params, $exclude_block_keys );
            $remove_xss_values = array_diff_key( $remove_xss_values, $exclude_block_keys );
          }

          $xss_detection = str_replace( $remove_xss_params, '', $xss_detection );
          $xss_detection = str_replace( $remove_xss_values, '', $xss_detection );
        }

        // If the Original Page URI and the URI after XSS Detection does not same
        // then, redirect the user on the URI which doesn't contain XSS Parameters
        if ( $get_page_uri != $xss_detection ) {
            $xss_detection = $_SERVER['HTTP_HOST'] . $xss_detection;

            // Set HTTP as the default protocol
            $protocol = 'http';
            if ( isset( $_SERVER['HTTPS'] ) ) {
                if ( 'on' == strtolower( $_SERVER['HTTPS'] ) ) {
                    $protocol = 'https';
                } elseif ( '1' == $_SERVER['HTTPS'] ) {
                    $protocol = 'https';
                }
            } elseif ( isset( $_SERVER['SERVER_PORT'] )
                && ( '443' == $_SERVER['SERVER_PORT'] )
            ) {
                $protocol = 'https';
            }

            if ( isset( $_SERVER['HTTP_X_FORWARDED_PROTO'] )
                && 'https' == $_SERVER['HTTP_X_FORWARDED_PROTO']
            ) {
                $protocol = 'https';
            }

            $xss_detection = $protocol . '://' . $xss_detection;

            header( 'HTTP/1.0 301 Moved Permanently' );
            header( 'Location: ' . $xss_detection );
            exit();
        }
    }

    /**
     * Escaped HTML string in `$_GET`
     *
     * @access public
     * @since 0.2
     * @updated 0.3.5
     *
     * @return void
     */
    public function escape_html()
    {
        $reflected_xss_settings = get_option(
            'prevent_xss_vulnerability_reflected_settings'
        );

        if ( is_string( $reflected_xss_settings ) ) {
            $reflected_xss_settings = unserialize( $reflected_xss_settings );
        }

        if ( isset( $reflected_xss_settings )
            && isset( $reflected_xss_settings['escape_html'] )
            && 1 == $reflected_xss_settings['escape_html']
        ) {
            $get_all_params = $_GET;
            foreach ( $get_all_params as $key => $value ) {
                $_GET[$key] = esc_html( $value );
            }
        }
    }

    /**
     * Add Self XSS message
     *
     * @access public
     * @since 0.3.0
     * @updated 0.3.5
     *
     * @return void
     */
    public function self_xss_script()
    {
        $self_xss_settings = get_option(
            'prevent_xss_vulnerability_self_xss_settings'
        );

        if ( is_string( $self_xss_settings ) ) {
            $self_xss_settings = unserialize( $self_xss_settings );
        }

        if ( isset( $self_xss_settings )
          && isset( $self_xss_settings['user_warning'] )
          && 1 == $self_xss_settings['user_warning']
        ) {
            $message = '';
            if ( isset( $self_xss_settings['warning_message'] )
              && ! empty( $self_xss_settings['warning_message'] )
            ) {
                $message = esc_html( $self_xss_settings['warning_message'] );
            }

            $plugin_url = plugins_url( '/frontend', PREVENT_XSS_VULNERABILITY_FILE );
            wp_enqueue_script( 'prevent-xss-vulnerability',
                $plugin_url . '/js/script.min.js', array(), '0.3.1', true
            );
            wp_localize_script( 'prevent-xss-vulnerability', 'selfXss', array(
                'message' => $message,
            ));
        }
    }
}
