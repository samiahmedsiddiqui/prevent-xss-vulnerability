<?php
/**
 * @package PreventXSSVulnerability
 */

class Prevent_XSS_Vulnerability_Frontend
{

    /*
     * JS file suffix (version number with with extension)
     */
    private $js_suffix = '-' . PREVENT_XSS_VULNERABILITY_PLUGIN_VERSION . '.min.js';

    /**
     * Initialize WordPress init Hook
     */
    public function init()
    {
        add_action( 'plugins_loaded', array( $this, 'prevent_reflected_xss' ) );
        add_action( 'wp', array( $this, 'escape_html' ) );
        add_action( 'wp_enqueue_scripts', array( $this, 'self_xss_script' ), 100 );
    }

    /**
     * Remove XSS parameters from the URI (if enabled).
     *
     * @access private
     * @since 1.0.0
     *
     * @param object $xss_detection Current page URI.
     * @param object $reflected_xss Settings saved from Reflected XSS page.
     *
     * @return string URI after removing XSS parameters (if enabled).
     */
    private function block_xss_params( $xss_detection, $reflected_xss ) {
        if ( 1 === $reflected_xss['enable_blocking'] ) {
            $remove_xss_params = array(
                '<',
                '>',
                '(',
                ')',
                '[',
                ']',
                '{',
                '|',
                '}',
            );
            $remove_xss_values = array(
                '%3C',
                '%3E',
                '%28',
                '%29',
                '%5B',
                '%5D',
                '%7B',
                '%7C',
                '%7D',
            );

            if ( isset( $reflected_xss['exclude_block_entities'] )
                && ! empty( $reflected_xss['exclude_block_entities'] )
            ) {
              $blocked_entities = preg_replace( '/\s+/', '',
                  $reflected_xss['exclude_block_entities']
              );
              $blocked_entities = explode( ',', $blocked_entities );
              $entities_length  = count( $blocked_entities );
              $loop_count       = 0;

              while ( $loop_count < $entities_length ) {
                  $key = array_search( $blocked_entities[$loop_count],
                      $remove_xss_params
                  );
                  $exclude_block_keys[$key] = $key;
                  $loop_count += 1;
              }

              $remove_xss_params = array_diff_key( $remove_xss_params,
                  $exclude_block_keys
              );
              $remove_xss_values = array_diff_key( $remove_xss_values,
                  $exclude_block_keys
              );
            }

            $xss_detection = str_replace( $remove_xss_params, '', $xss_detection );
            $xss_detection = str_replace( $remove_xss_values, '', $xss_detection );
        }

        return $xss_detection;
    }

    /**
     * Encode XSS parameters from the URI (if enabled).
     *
     * @access private
     * @since 1.0.0
     *
     * @param object $xss_detection URI after removing blocking parameters.
     * @param object $reflected_xss Settings saved from Reflected XSS page.
     *
     * @return string URI after encoding XSS parameters (if enabled).
     */
    private function encode_xss_params( $xss_detection, $reflected_xss ) {
        if ( 1 === $reflected_xss['enable_encoding'] ) {
            $encode_params = array(
                ' ',
                '!',
                '"',
                '% ',
                "'",
                '(',
                ')',
                '*',
                '<',
                '>',
                '`',
                '^',
                '[',
                ']',
                '{',
                '|',
                '}',
            );

            $encode_values = array(
                '%20', // Space Encoded Value
                '%21', // ! Encoded Value
                '%22', // " Encoded Value
                '%25', // % Encoded Value
                '%27', // ' Encoded Value
                '%28', // ( Encoded Value
                '%29', // ) Encoded Value
                '%2A', // * Encoded Value
                '%3C', // < Encoded Value
                '%3E', // > Encoded Value
                '%60', // ` Encoded Value
                '%5E', // ^ Encoded Value
                '%5B', // [ Encoded Value
                '%5D', // ] Encoded Value
                '%7B', // { Encoded Value
                '%7C', // | Encoded Value
                '%7D', // } Encoded Value
            );

            if ( isset( $reflected_xss['exclude_encode_entities'] )
                && ! empty( $reflected_xss['exclude_encode_entities'] )
            ) {
                $encoded_entities = preg_replace( '/\s+/', '',
                    $reflected_xss['exclude_encode_entities']
                );
                $encoded_entities = explode( ',', $encoded_entities );
                $entities_length  = count( $encoded_entities );
                $loop_count       = 0;

                while ( $loop_count < $entities_length ) {
                    $key = array_search( $encoded_entities[$loop_count],
                        $encode_params
                    );
                    $exclude_encode_keys[$key] = $key;
                    $loop_count += 1;
                }

                $encode_params = array_diff_key( $encode_params,
                    $exclude_encode_keys
                );
                $encode_values = array_diff_key( $encode_values,
                    $exclude_encode_keys
                );
            }

            $xss_detection = str_replace( $encode_params, $encode_values,
                $xss_detection
            );
        }

        return $xss_detection;
    }

    /**
     * Encode and remove the Entities in Page URI and match with Original URI.
     * If both doesn't match so, it redirects the user to the Encoded
     * and Removed URI.
     *
     * @access private
     * @since 0.1
     */
    public function prevent_reflected_xss()
    {
        $reflected_xss = get_option(
            'prevent_xss_vulnerability_reflected_settings'
        );

        if ( is_string( $reflected_xss ) ) {
            $reflected_xss = unserialize( $reflected_xss );
        }

        if ( ! isset( $reflected_xss ) || empty( $reflected_xss )
          || (
              1 != $reflected_xss['enable_encoding']
              && 1 != $reflected_xss['enable_blocking']
          )
        ) {
            return;
        }

        $get_page_uri = '';
        if ( isset( $_SERVER['REQUEST_URI'] ) ) {
            $get_page_uri = $_SERVER['REQUEST_URI'];
        }

        $xss_detection = $get_page_uri;
        $xss_detection = $this->block_xss_params( $xss_detection, $reflected_xss );
        $xss_detection = $this->encode_xss_params( $xss_detection, $reflected_xss );

        /*
         * If the request page URI and the URI after XSS Detection is not the same
         * then, redirect the user on the URI which doesn't contain XSS Parameters.
         */
        if ( $get_page_uri != $xss_detection ) {
            nocache_headers();
            wp_safe_redirect( $xss_detection );
            exit();
        }
    }

    /**
     * Escaped HTML string in `$_GET`
     *
     * @access public
     * @since 0.2
     */
    public function escape_html()
    {
        $reflected_xss = get_option(
            'prevent_xss_vulnerability_reflected_settings'
        );

        if ( is_string( $reflected_xss ) ) {
            $reflected_xss = unserialize( $reflected_xss );
        }

        if ( isset( $reflected_xss ) && isset( $reflected_xss['escape_html'] )
            && 1 === $reflected_xss['escape_html']
        ) {
            $get_all_params = $_GET;
            foreach ( $get_all_params as $key => $value ) {
                if ( is_array( $value ) ) {
                    $escape_array = array();
                    foreach ( $value as $array_key => $array_value ) {
                        $escape_array[$array_key] = esc_html( $array_value );
                    }

                    $_GET[$key] = $escape_array;
                } else {
                    $_GET[$key] = esc_html( $value );
                }
            }
        }
    }

    /**
     * Add Self XSS message
     *
     * @access public
     * @since 0.3.0
     */
    public function self_xss_script()
    {
        $self_xss = get_option( 'prevent_xss_vulnerability_self_xss_settings' );

        if ( is_string( $self_xss ) ) {
            $self_xss = unserialize( $self_xss );
        }

        if ( isset( $self_xss ) && isset( $self_xss['user_warning'] )
            && 1 === $self_xss['user_warning']
        ) {
            $message = '';
            if ( isset( $self_xss['warning_message'] )
                && ! empty( $self_xss['warning_message'] )
            ) {
                $message = esc_html( $self_xss['warning_message'] );
            }

            $js_filename = 'script' . $this->js_suffix;
            $plugin_url  = plugins_url( '/frontend', PREVENT_XSS_VULNERABILITY_FILE );
            wp_enqueue_script( 'prevent-xss-vulnerability',
                $plugin_url . '/js/' . $js_filename, array(), false, true
            );
            wp_localize_script( 'prevent-xss-vulnerability', 'selfXss', array(
                'message' => $message,
            ));
        }
    }
}
