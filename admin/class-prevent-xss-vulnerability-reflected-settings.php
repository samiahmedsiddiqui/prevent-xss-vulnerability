<?php
/**
 * @package PreventXSSVulnerability
 */

class Prevent_XSS_Vulnerability_Reflected_Settings
{

    /*
     * Css file suffix (version number with with extension)
     */
    private $css_suffix = '-' . PREVENT_XSS_VULNERABILITY_PLUGIN_VERSION . '.min.css';

    /**
     * Call Reflected Settings Function.
     */
    function __construct()
    {
        $this->xss_reflected_settings();
    }

    /**
     * Reflected Settings Page
     *
     * @access private
     * @since 0.1
     *
     * @return void
     */
    private function xss_reflected_settings()
    {
        if ( ! current_user_can( 'administrator' ) )  {
            wp_die( __( 'You do not have sufficient permissions to access this page.', 'prevent-xss-vulnerability' ) );
        }

        if ( isset( $_POST['submit'] ) ) {
            $reflected_xss = array();

            $reflected_xss['exclude_encode_entities'] = '';
            if ( isset( $_POST['exclude_encode_entities'] ) ) {
                $reflected_xss['exclude_encode_entities'] = wp_kses( $_POST['exclude_encode_entities'], array() );
            }

            $reflected_xss['enable_encoding'] = 0;
            if ( isset( $_POST['enable_encoding'] ) && 1 == $_POST['enable_encoding'] ) {
                $reflected_xss['enable_encoding'] = 1;
            }

            $reflected_xss['exclude_block_entities'] = '';
            if ( isset( $_POST['exclude_block_entities'] ) ) {
                $reflected_xss['exclude_block_entities'] = wp_kses( $_POST['exclude_block_entities'], array() );
            }

            $reflected_xss['enable_blocking'] = 0;
            if ( isset( $_POST['enable_blocking'] ) && 1 == $_POST['enable_blocking'] ) {
                $reflected_xss['enable_blocking'] = 1;
            }

            $reflected_xss['escape_html'] = '';
            if ( isset( $_POST['escape_html'] ) ) {
                $reflected_xss['escape_html'] = wp_kses( $_POST['escape_html'], array() );
            }
            update_option(
                'prevent_xss_vulnerability_reflected_settings', $reflected_xss
            );
        }
        $get_reflected_xss = get_option(
            'prevent_xss_vulnerability_reflected_settings'
        );
        if ( is_string( $get_reflected_xss ) ) {
            $get_reflected_xss = unserialize( $get_reflected_xss );
        }
        $enable_blocking                = '';
        $enable_encoding                = '';
        $escape_html                    = '';
        $exclude_block_entities_values  = '';
        $exclude_encode_entities_values = '';

        if ( isset( $get_reflected_xss['exclude_block_entities'] )
            && ! empty( $get_reflected_xss['exclude_block_entities'] )
        ) {
            $exclude_block_entities_values = $get_reflected_xss['exclude_block_entities'];
        }
        if ( isset( $get_reflected_xss['enable_blocking'] )
          && 1 == $get_reflected_xss['enable_blocking']
        ) {
            $enable_blocking = 'checked';
        }
        if ( isset( $get_reflected_xss['exclude_encode_entities'] )
          && ! empty( $get_reflected_xss['exclude_encode_entities'] )
        ) {
            $exclude_encode_entities_values = $get_reflected_xss['exclude_encode_entities'];
        }
        if ( isset( $get_reflected_xss['enable_encoding'] )
            && 1 == $get_reflected_xss['enable_encoding']
        ) {
            $enable_encoding = 'checked';
        }

        if ( isset( $get_reflected_xss['escape_html'] )
            && 1 == $get_reflected_xss['escape_html']
        ) {
            $escape_html = 'checked';
        }

        $filename   = 'admin-style' . $this->css_suffix;
        $plugin_url = plugins_url( '/admin', PREVENT_XSS_VULNERABILITY_FILE );
        wp_enqueue_style( 'style', $plugin_url . '/css/' . $filename );

        $html = '<div class="wrap">' .
                  '<h2>' .
                    __( 'Reflected Cross-site scripting(XSS) Settings', 'prevent-xss-vulnerability' ) .
                  '</h2>' .
                  '<div>' .
                    '<p>' .
                      __( 'Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. You can read more about XSS from <a href="https://www.yasglobal.com/cross-site-scripting-xss/" title="Cross-site Scripting (XSS)" target="_blank">here</a>.', 'prevent-xss-vulnerability' ) .
                    '</p>' .
                  '</div>' .
                  '<table class="important">' .
                    '<tr>' .
                      '<td class="icon">' .
                        '<i class="fa icon icon-important" title="important">&nbsp;</i>' .
                      '</td>' .
                      '<td>' .
                        '<p>' .
                          __( 'After configuring the settings please check some pages randomly to verify that your site is working as expected.', 'prevent-xss-vulnerability' ) .
                        '</p>' .
                        '<p>' .
                          __( 'If you are using <b>WooCommerce</b>, then in that case it is highly <b>recommended</b> to go through with all the steps of the Product Purchase (Cart, Checkout etc) to make sure that your online store is working fine.', 'prevent-xss-vulnerability' ) .
                        '</p>' .
                      '</td>' .
                    '</tr>' .
                  '</table>' .
                  '<form enctype="multipart/form-data" action="" method="POST" id="reflected-xss">' .
                    '<table class="prevent-xss reflected-xss">' .
                      '<caption>' .
                        __( 'Block Entities (Remove Entities)', 'prevent-xss-vulnerability' ) .
                      '</caption>' .
                      '<tbody>' .
                        '<tr>' .
                          '<td>' .
                            '<p>' .
                              __( 'This Plugin <b>Block/Remove</b> the following <b>Entities</b> in the URL:', 'prevent-xss-vulnerability' ) .
                            '</p>' .
                            '<ol class="reflected-xss-items">' .
                              '<li>' .
                                __( 'Opening Round Bracket <code>(</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Closing Round Bracket <code>)</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Less than Sign <code>&lt;</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Greater than Sign <code>&gt;</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Opening Square Bracket <code>[</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Closing Square Bracket <code>]</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Opening Curly Bracket <code>{</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Pipe or Vertical Bar <code>|</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Closing Curly Bracket <code>}</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                            '</ol>' .
                          '</td>' .
                        '</tr>' .
                        '<tr>' .
                          '<td>' .
                            '<b>' .
                              '<label for="exclude_block_entities">' .
                                __( 'Exclude Entites from Blocking', 'prevent-xss-vulnerability' ) . ' :' .
                              '</label>' .
                            '</b>' .
                            '<textarea name="exclude_block_entities" placeholder="' . __( 'Add Entities in Comma Separated Form', 'prevent-xss-vulnerability' ) . '" rows="5" cols="100">' .
                              $exclude_block_entities_values .
                            '</textarea>' .
                            '<small>' .
                              __( 'Add Entities in Comma Separated Form which you do not want to be blocked/remove in the URL. Like: <code>[</code>,<code>{</code>,<code>]</code>', 'prevent-xss-vulnerability' ) .
                            '</small>' .
                          '</td>' .
                        '</tr>' .
                        '<tr>' .
                          '<td class="enable">' .
                            '<input type="checkbox" name="enable_blocking" value=1 ' . $enable_blocking . ' />' .
                            '<b>' .
                              __( 'Enable Blocking', 'prevent-xss-vulnerability' ) .
                            '</b>' .
                          '</td>' .
                        '</tr>' .
                      '</tbody>' .
                    '</table>' .

                    '<table class="prevent-xss reflected-xss">' .
                      '<caption>' .
                        __( 'Encode Entities', 'prevent-xss-vulnerability' ) .
                      '</caption>' .
                      '<tbody>' .
                        '<tr>' .
                          '<td>' .
                            '<p>' .
                              __( 'This Plugin <b>Encodes</b> the following <b>Entities</b> in the URL', 'prevent-xss-vulnerability' ) . ' :' .
                            '</p>' .
                            '<ol class="reflected-xss-items">' .
                              '<li>' .
                                __( 'Exclamation Mark <code>!</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Double Quotation <code>"</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Single Quotation <code>\'</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Opening Round Bracket <code>(</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Closing Round Bracket <code>)</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Asterik Sign <code>*</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Less than Sign <code>&lt;</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Greater than Sign <code>&gt;</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Grave Accent <code>`</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Cap Sign <code>^</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Opening Square Bracket <code>[</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Closing Square Bracket <code>]</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Opening Curly Bracket <code>{</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Pipe or Vertical Bar <code>|</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                              '<li>' .
                                __( 'Closing Curly Bracket <code>}</code>', 'prevent-xss-vulnerability' ) .
                              '</li>' .
                            '</ol>' .
                          '</td>' .
                        '</tr>' .
                        '<tr>' .
                          '<td>' .
                            '<b>' .
                              '<label for="exclude_encoding_entities">' .
                                __( 'Exclude Entites from Encoding', 'prevent-xss-vulnerability' ) .
                              ' :</label>' .
                            '</b>' .
                            '<textarea name="exclude_encode_entities" placeholder="' . __( 'Add Entities in Comma Separated Form', 'prevent-xss-vulnerability' ) . '" rows="5" cols="100">' .
                              $exclude_encode_entities_values .
                            '</textarea>' .
                            '<small>' .
                              __( 'Add Entities in Comma Separated Form which you do not want to be encoded in the URL. Like: <code>[</code>,<code>{</code>,<code>]</code>', 'prevent-xss-vulnerability' ) .
                            '</small>' .
                          '</td>' .
                        '</tr>' .
                        '<tr>' .
                          '<td class="enable">' .
                            '<input type="checkbox" name="enable_encoding" value=1 ' . $enable_encoding . ' />' .
                            '<b>' . __( 'Enable Encoding', 'prevent-xss-vulnerability' ) . '</b>' .
                          '</td>' .
                        '</tr>' .
                      '</tbody>' .
                    '</table>' .

                    '<table class="prevent-xss reflected-xss">' .
                      '<caption>' .
                        __( 'Escape HTML', 'prevent-xss-vulnerability' ) .
                      '</caption>' .
                      '<tbody>' .
                        '<tr>' .
                          '<td>' .
                            '<p>' .
                              __( 'It strips the HTML in <code>$_GET</code> variable in PHP. So, where ever the <code>$_GET</code> is used in either theme or plugin will get the escaped HTML. It prevents the XSS Attack using HTML and JS Events. <b>If any plugin directly fetching the parameters from the URL without using <code>$_GET</code> variable will get the values without HTML escaped</b>.', 'prevent-xss-vulnerability' ) .
                            '</p>' .
                          '</td>' .
                        '</tr>' .
                        '<tr>' .
                            '<td class="enable">' .
                              '<input type="checkbox" name="escape_html" value=1 ' . $escape_html . ' />' .
                              '<b>' .
                                __( 'Enable Escaping', 'prevent-xss-vulnerability' ) .
                              '</b>' .
                            '</td>' .
                        '</tr>' .
                      '</tbody>' .
                    '</table>' .

                    '<p class="submit">' .
                      '<input type="submit" name="submit" id="submit" class="button button-primary" value="' . __( 'Save Changes', 'prevent-xss-vulnerability' ) . '" />' .
                    '</p>' .
                  '</form>' .
                '</div>';

        echo $html;
    }
}
