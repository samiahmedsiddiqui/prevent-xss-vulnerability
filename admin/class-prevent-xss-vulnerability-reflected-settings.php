<?php
/**
 * @package PreventXSSVulnerability
 */

class Prevent_XSS_Vulnerability_Reflected_Settings
{

    /**
     * Call Reflected Settings Function.
     */
    function __construct()
    {
        $this->xss_reflected_settings();
    }

    /**
     * Generate Block entities section HTML
     *
     * @access private
     * @since 1.0.0
     *
     * @return string Block entities output
     */
    private function get_block_output( $excluded_entities, $enabled )
    {
    ?>
        <table class="prevent-xss reflected-xss">
          <caption>
            <?php esc_html_e( 'Block Entities (Remove Entities)', 'prevent-xss-vulnerability' ); ?>
          </caption>
          <tbody>
            <tr>
              <td>
                <p>
                  <?php esc_html_e( 'This Plugin Block/Remove the following Entities in the URL:', 'prevent-xss-vulnerability' ); ?>
                </p>
                <ol class="reflected-xss-items">
                  <li>
                    <?php esc_html_e( 'Opening Round Bracket', 'prevent-xss-vulnerability' ); ?> <code>(</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Closing Round Bracket', 'prevent-xss-vulnerability' ); ?> <code>)</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Less than Sign', 'prevent-xss-vulnerability' ); ?> <code>&lt;</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Greater than Sign', 'prevent-xss-vulnerability' ); ?> <code>&gt;</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Opening Square Bracket', 'prevent-xss-vulnerability' ); ?> <code>[</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Closing Square Bracket', 'prevent-xss-vulnerability' ); ?> <code>]</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Opening Curly Bracket', 'prevent-xss-vulnerability' ); ?> <code>{</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Pipe or Vertical Bar', 'prevent-xss-vulnerability' ); ?> <code>|</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Closing Curly Bracket', 'prevent-xss-vulnerability' ); ?> <code>}</code>
                  </li>
                </ol>
              </td>
            </tr>
            <tr>
              <td>
                <b>
                  <label for="exclude_block_entities">
                    <?php esc_html_e( 'Exclude Entities from Blocking:', 'prevent-xss-vulnerability' ); ?>
                  </label>
                </b>
                <textarea name="exclude_block_entities" placeholder="<?php esc_html_e( 'Add Entities in Comma Separated Form', 'prevent-xss-vulnerability' ); ?>" rows="5" cols="100"><?php esc_html_e( $excluded_entities ); ?></textarea>
                <small>
                  <?php esc_html_e( 'Add Entities in Comma Separated that you do not want to be blocked/remove in the URL. Like:', 'prevent-xss-vulnerability' ); ?> <code>[</code>,<code>{</code>,<code>]</code>
                </small>
              </td>
            </tr>
            <tr>
              <td class="enable">
                <input type="checkbox" name="enable_blocking" value=1 <?php esc_html_e( $enabled ); ?>/>
                <b>
                  <?php esc_html_e( 'Enable Blocking', 'prevent-xss-vulnerability' ); ?>
                </b>
              </td>
            </tr>
          </tbody>
        </table>

    <?php
    }

    /**
     * Generate Encode entities section HTML
     *
     * @access private
     * @since 1.0.0
     */
    private function get_encode_output( $excluded_entities, $enabled )
    {
    ?>
        <table class="prevent-xss reflected-xss">
          <caption>
            <?php esc_html_e( 'Encode Entities', 'prevent-xss-vulnerability' ); ?>
          </caption>
          <tbody>
            <tr>
              <td>
                <p>
                  <?php esc_html_e( 'This Plugin Encodes the following Entities in the URL: ', 'prevent-xss-vulnerability' ); ?>
                </p>
                <ol class="reflected-xss-items">
                  <li>
                    <?php esc_html_e( 'Exclamation Mark', 'prevent-xss-vulnerability' ); ?> <code>!</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Double Quotation', 'prevent-xss-vulnerability' ); ?> <code>"</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Single Quotation', 'prevent-xss-vulnerability' ); ?> <code>\</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Opening Round Bracket', 'prevent-xss-vulnerability' ); ?> <code>(</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Closing Round Bracket', 'prevent-xss-vulnerability' ); ?> <code>)</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Asterisk Sign', 'prevent-xss-vulnerability' ); ?> <code>*</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Less than Sign', 'prevent-xss-vulnerability' ); ?> <code>&lt;</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Greater than Sign', 'prevent-xss-vulnerability' ); ?> <code>&gt;</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Grave Accent', 'prevent-xss-vulnerability' ); ?> <code>`</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Cap Sign', 'prevent-xss-vulnerability' ); ?> <code>^</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Opening Square Bracket', 'prevent-xss-vulnerability' ); ?> <code>[</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Closing Square Bracket', 'prevent-xss-vulnerability' ); ?> <code>]</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Opening Curly Bracket', 'prevent-xss-vulnerability' ); ?> <code>{</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Pipe or Vertical Bar', 'prevent-xss-vulnerability' ); ?> <code>|</code>
                  </li>
                  <li>
                    <?php esc_html_e( 'Closing Curly Bracket', 'prevent-xss-vulnerability' ); ?> <code>}</code>
                  </li>
                </ol>
              </td>
            </tr>
            <tr>
              <td>
                <b>
                  <label for="exclude_encoding_entities">
                    <?php esc_html_e( 'Exclude Entities from Encoding: ', 'prevent-xss-vulnerability' ); ?>
                  </label>
                </b>
                <textarea name="exclude_encode_entities" placeholder="<?php esc_html_e( 'Add Entities in Comma Separated Form', 'prevent-xss-vulnerability' ); ?>" rows="5" cols="100"><?php esc_html_e( $excluded_entities ); ?></textarea>
                <small>
                  <?php esc_html_e( 'Add Entities in Comma Separated list that you do not want to be encoded in the URL. Like:', 'prevent-xss-vulnerability' ); ?> <code>[</code>,<code>]</code>
                </small>
              </td>
            </tr>
            <tr>
              <td class="enable">
                <input type="checkbox" name="enable_encoding" value=1 <?php esc_html_e( $enabled ); ?>/>
                <b> <?php esc_html_e( 'Enable Encoding', 'prevent-xss-vulnerability' ); ?> </b>
              </td>
            </tr>
          </tbody>
        </table>

    <?php
    }

    /**
     * Generate Escape section HTML
     *
     * @access private
     * @since 1.0.0
     */
    private function get_escape_output( $enabled )
    {
    ?>
        <table class="prevent-xss reflected-xss">
          <caption>
            <?php esc_html_e( 'Escape HTML', 'prevent-xss-vulnerability' ); ?>
          </caption>
          <tbody>
            <tr>
              <td>
                <p>
                <?php
                  esc_html_e( 'It strips the HTML in $_GET variable in PHP. So, where ever the $_GET is used in either theme or plugin will get the escaped HTML. It prevents the XSS Attack using HTML and JS Events. If any plugin directly fetching the parameters from the URL without using $_GET variable will get the values without HTML escaped.', 'prevent-xss-vulnerability' );
                ?>
                </p>
              </td>
            </tr>
            <tr>
                <td class="enable">
                  <input type="checkbox" name="escape_html" value=1 <?php esc_html_e( $enabled ); ?>/>
                  <b>
                    <?php esc_html_e( 'Enable Escaping', 'prevent-xss-vulnerability' ); ?>
                  </b>
                </td>
            </tr>
          </tbody>
        </table>

    <?php
    }

    /**
     * Generate Refleccted page note HTML
     *
     * @access private
     * @since 1.0.0
     */
    private function get_reflected_desc()
    {
    ?>

        <div>
          <p>
          <?php
            esc_html_e(
                'Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. You can read more about XSS from',
                'prevent-xss-vulnerability'
            );
          ?>
            <a href="https://www.yasglobal.com/cross-site-scripting-xss/" title="Cross-site Scripting (XSS)" target="_blank"><?php esc_html_e( 'here', 'prevent-xss-vulnerability' ); ?></a>.
          </p>
        </div>

        <table class="important">
          <tr>
            <td class="icon">
              <i class="fa icon icon-important" title="important">&nbsp;</i>
            </td>
            <td>
              <p>
              <?php
                esc_html_e(
                    'After configuring the settings please check some pages randomly to verify that your site is working as expected.',
                    'prevent-xss-vulnerability'
                );
              ?>
              </p>
              <p>
              <?php
                esc_html_e(
                    'If you are using WooCommerce, then in that case it is highly recommended to go through with all the steps of the Product Purchase (Cart, Checkout etc) to make sure that your online store is working fine.',
                    'prevent-xss-vulnerability'
                );
              ?>
              </p>
            </td>
          </tr>
        </table>

    <?php
    }

    /**
     * Save Reflected Settings
     *
     * @access private
     * @since 1.0.0
     */
    private function save_reflected_settings()
    {
        $form_submit = filter_input( INPUT_POST, 'submit' );
        $user_id     = get_current_user_id();

        if ( $form_submit
            && check_admin_referer(
                'prevent-xss-vulnerability-reflected_' . $user_id,
                '_prevent_xss_vulnerability_reflected_nonce'
            )
        ) {
            $reflected_xss = array(
                'exclude_encode_entities' => '',
                'enable_encoding'         => 0,
                'exclude_block_entities'  => '',
                'enable_blocking'         => 0,
                'escape_html'             => 0,
            );

            $encode_entities = filter_input( INPUT_POST, 'exclude_encode_entities' );
            if ( $encode_entities ) {
                $reflected_xss['exclude_encode_entities'] = wp_kses(
                    $encode_entities, array()
                );
            }

            $enable_encoding = filter_input( INPUT_POST, 'enable_encoding' );
            if ( $enable_encoding && 1 == $enable_encoding ) {
                $reflected_xss['enable_encoding'] = 1;
            }

            $block_entities = filter_input( INPUT_POST, 'exclude_block_entities' );
            if ( $block_entities ) {
                $reflected_xss['exclude_block_entities'] = wp_kses(
                    $block_entities, array()
                );
            }

            $enable_blocking = filter_input( INPUT_POST, 'enable_blocking' );
            if ( $enable_blocking && 1 == $enable_blocking ) {
                $reflected_xss['enable_blocking'] = 1;
            }

            $escape_html = filter_input( INPUT_POST, 'escape_html' );
            if ( $escape_html && 1 == $escape_html ) {
                $reflected_xss['escape_html'] = 1;
            }

            update_option( 'prevent_xss_vulnerability_reflected_settings',
                $reflected_xss
            );
        }
    }

    /**
     * Reflected Settings Page
     *
     * @access private
     * @since 0.1
     */
    private function xss_reflected_settings()
    {
        $this->save_reflected_settings();

        $user_id      = get_current_user_id();
        $xss_settings = get_option( 'prevent_xss_vulnerability_reflected_settings' );

        if ( is_string( $xss_settings ) ) {
            $xss_settings = unserialize( $xss_settings );
        }

        $enable_blocking     = '';
        $enable_encoding     = '';
        $escape_html         = '';
        $xss_block_entities  = '';
        $xss_encode_entities = '';

        if ( isset( $xss_settings['exclude_block_entities'] ) ) {
            $xss_block_entities = $xss_settings['exclude_block_entities'];
        }

        if ( isset( $xss_settings['enable_blocking'] )
            && 1 === $xss_settings['enable_blocking']
        ) {
            $enable_blocking = 'checked';
        }

        if ( isset( $xss_settings['exclude_encode_entities'] ) ) {
            $xss_encode_entities = $xss_settings['exclude_encode_entities'];
        }

        if ( isset( $xss_settings['enable_encoding'] )
            && 1 === $xss_settings['enable_encoding']
        ) {
            $enable_encoding = 'checked';
        }

        if ( isset( $xss_settings['escape_html'] )
            && 1 === $xss_settings['escape_html']
        ) {
            $escape_html = 'checked';
        }
        ?>

        <div class="wrap">
          <h2>
          <?php
            esc_html_e( 'Reflected Cross-site scripting(XSS) Settings', 'prevent-xss-vulnerability' );
          ?>
          </h2>

          <?php $this->get_reflected_desc(); ?>

          <form enctype="multipart/form-data" action="" method="POST" id="reflected-xss">
            <?php
              wp_nonce_field(
                  'prevent-xss-vulnerability-reflected_' . $user_id,
                  '_prevent_xss_vulnerability_reflected_nonce', true
              );
              $this->get_block_output( $xss_block_entities, $enable_blocking );
              $this->get_encode_output( $xss_encode_entities, $enable_encoding );
              $this->get_escape_output( $escape_html );
            ?>
            <p class="submit">
              <input type="submit" name="submit" id="submit" class="button button-primary" value="<?php esc_html_e( 'Save Changes', 'prevent-xss-vulnerability' ); ?>" />
            </p>
          </form>
        </div>
        <?php
    }
}
