<?php
/**
 * @package PreventXSSVulnerability
 */

class Prevent_XSS_Vulnerability_Reflected_Settings
{

    /*
     * Css file suffix (version number with with extension)
     */
    private $css_suffix = '-' . PREVENT_XSS_VULNERABILITY_PLUGIN_VERSION . '.min.css';

    /**
     * Call Reflected Settings Function.
     */
    function __construct()
    {
        $this->xss_reflected_settings();
    }

    /**
     * Generate Block entities section HTML
     *
     * @access private
     * @since 1.0.0
     *
     * @return string Block entities output
     */
    private function get_block_entities_output( $excluded_entities, $enabled )
    {
        $block_html = '<table class="prevent-xss reflected-xss">' .
                        '<caption>' .
                          __( 'Block Entities (Remove Entities)', 'prevent-xss-vulnerability' ) .
                        '</caption>' .
                        '<tbody>' .
                          '<tr>' .
                            '<td>' .
                              '<p>' .
                                __( 'This Plugin <b>Block/Remove</b> the following <b>Entities</b> in the URL:', 'prevent-xss-vulnerability' ) .
                              '</p>' .
                              '<ol class="reflected-xss-items">' .
                                '<li>' .
                                  __( 'Opening Round Bracket <code>(</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                                '<li>' .
                                  __( 'Closing Round Bracket <code>)</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                                '<li>' .
                                  __( 'Less than Sign <code>&lt;</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                                '<li>' .
                                  __( 'Greater than Sign <code>&gt;</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                                '<li>' .
                                  __( 'Opening Square Bracket <code>[</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                                '<li>' .
                                  __( 'Closing Square Bracket <code>]</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                                '<li>' .
                                  __( 'Opening Curly Bracket <code>{</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                                '<li>' .
                                  __( 'Pipe or Vertical Bar <code>|</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                                '<li>' .
                                  __( 'Closing Curly Bracket <code>}</code>', 'prevent-xss-vulnerability' ) .
                                '</li>' .
                              '</ol>' .
                            '</td>' .
                          '</tr>' .
                          '<tr>' .
                            '<td>' .
                              '<b>' .
                                '<label for="exclude_block_entities">' .
                                  __( 'Exclude Entities from Blocking', 'prevent-xss-vulnerability' ) . ' :' .
                                '</label>' .
                              '</b>' .
                              '<textarea name="exclude_block_entities" placeholder="' . __( 'Add Entities in Comma Separated Form', 'prevent-xss-vulnerability' ) . '" rows="5" cols="100">' .
                                $excluded_entities .
                              '</textarea>' .
                              '<small>' .
                                __( 'Add Entities in Comma Separated Form which you do not want to be blocked/remove in the URL. Like: <code>[</code>,<code>{</code>,<code>]</code>', 'prevent-xss-vulnerability' ) .
                              '</small>' .
                            '</td>' .
                          '</tr>' .
                          '<tr>' .
                            '<td class="enable">' .
                              '<input type="checkbox" name="enable_blocking" value=1 ' . $enabled . ' />' .
                              '<b>' .
                                __( 'Enable Blocking', 'prevent-xss-vulnerability' ) .
                              '</b>' .
                            '</td>' .
                          '</tr>' .
                        '</tbody>' .
                      '</table>';

        return $block_html;
    }

    /**
     * Generate Encode entities section HTML
     *
     * @access private
     * @since 1.0.0
     *
     * @return string Encode entities output
     */
    private function get_encode_entities_output( $excluded_entities, $enabled )
    {
        $encodes_html = '<table class="prevent-xss reflected-xss">' .
                          '<caption>' .
                            __( 'Encode Entities', 'prevent-xss-vulnerability' ) .
                          '</caption>' .
                          '<tbody>' .
                            '<tr>' .
                              '<td>' .
                                '<p>' .
                                  __( 'This Plugin <b>Encodes</b> the following <b>Entities</b> in the URL', 'prevent-xss-vulnerability' ) . ' :' .
                                '</p>' .
                                '<ol class="reflected-xss-items">' .
                                  '<li>' .
                                    __( 'Exclamation Mark <code>!</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Double Quotation <code>"</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Single Quotation <code>\'</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Opening Round Bracket <code>(</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Closing Round Bracket <code>)</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Asterisk Sign <code>*</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Less than Sign <code>&lt;</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Greater than Sign <code>&gt;</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Grave Accent <code>`</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Cap Sign <code>^</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Opening Square Bracket <code>[</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Closing Square Bracket <code>]</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Opening Curly Bracket <code>{</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Pipe or Vertical Bar <code>|</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                  '<li>' .
                                    __( 'Closing Curly Bracket <code>}</code>', 'prevent-xss-vulnerability' ) .
                                  '</li>' .
                                '</ol>' .
                              '</td>' .
                            '</tr>' .
                            '<tr>' .
                              '<td>' .
                                '<b>' .
                                  '<label for="exclude_encoding_entities">' .
                                    __( 'Exclude Entities from Encoding', 'prevent-xss-vulnerability' ) .
                                  ' :</label>' .
                                '</b>' .
                                '<textarea name="exclude_encode_entities" placeholder="' . __( 'Add Entities in Comma Separated Form', 'prevent-xss-vulnerability' ) . '" rows="5" cols="100">' .
                                  $excluded_entities .
                                '</textarea>' .
                                '<small>' .
                                  __( 'Add Entities in Comma Separated Form which you do not want to be encoded in the URL. Like: <code>[</code>,<code>{</code>,<code>]</code>', 'prevent-xss-vulnerability' ) .
                                '</small>' .
                              '</td>' .
                            '</tr>' .
                            '<tr>' .
                              '<td class="enable">' .
                                '<input type="checkbox" name="enable_encoding" value=1 ' . $enabled . ' />' .
                                '<b>' . __( 'Enable Encoding', 'prevent-xss-vulnerability' ) . '</b>' .
                              '</td>' .
                            '</tr>' .
                          '</tbody>' .
                        '</table>';

        return $encodes_html;
    }

    /**
     * Generate Escape section HTML
     *
     * @access private
     * @since 1.0.0
     *
     * @return string Escape output
     */
    private function get_escape_output( $enabled )
    {
        $escapes_html = '<table class="prevent-xss reflected-xss">' .
                          '<caption>' .
                            __( 'Escape HTML', 'prevent-xss-vulnerability' ) .
                          '</caption>' .
                          '<tbody>' .
                            '<tr>' .
                              '<td>' .
                                '<p>' .
                                  __( 'It strips the HTML in <code>$_GET</code> variable in PHP. So, where ever the <code>$_GET</code> is used in either theme or plugin will get the escaped HTML. It prevents the XSS Attack using HTML and JS Events. <b>If any plugin directly fetching the parameters from the URL without using <code>$_GET</code> variable will get the values without HTML escaped</b>.', 'prevent-xss-vulnerability' ) .
                                '</p>' .
                              '</td>' .
                            '</tr>' .
                            '<tr>' .
                                '<td class="enable">' .
                                  '<input type="checkbox" name="escape_html" value=1 ' . $enabled . ' />' .
                                  '<b>' .
                                    __( 'Enable Escaping', 'prevent-xss-vulnerability' ) .
                                  '</b>' .
                                '</td>' .
                            '</tr>' .
                          '</tbody>' .
                        '</table>';

        return $escapes_html;
    }

    /**
     * Save Reflected Settings
     *
     * @access private
     * @since 1.0.0
     *
     * @return void
     */
    private function save_xss_reflected_settings()
    {
        $form_submit = filter_input( INPUT_POST, 'submit' );
        $user_id     = get_current_user_id();

        if ( $form_submit
            && check_admin_referer(
                'prevent-xss-vulnerability-reflected_' . $user_id,
                '_prevent_xss_vulnerability_reflected_nonce'
            )
        ) {
            $reflected_xss = array(
                'exclude_encode_entities' => '',
                'enable_encoding'         => 0,
                'exclude_block_entities'  => '',
                'enable_blocking'         => 0,
                'escape_html'             => 0,
            );

            $encode_entities = filter_input( INPUT_POST, 'exclude_encode_entities' );
            if ( $encode_entities ) {
                $reflected_xss['exclude_encode_entities'] = wp_kses(
                    $encode_entities, array()
                );
            }

            $enable_encoding = filter_input( INPUT_POST, 'enable_encoding' );
            if ( $enable_encoding && 1 == $enable_encoding ) {
                $reflected_xss['enable_encoding'] = 1;
            }

            $block_entities = filter_input( INPUT_POST, 'exclude_block_entities' );
            if ( $block_entities ) {
                $reflected_xss['exclude_block_entities'] = wp_kses(
                    $block_entities, array()
                );
            }

            $enable_blocking = filter_input( INPUT_POST, 'enable_blocking' );
            if ( $enable_blocking && 1 == $enable_blocking ) {
                $reflected_xss['enable_blocking'] = 1;
            }

            $escape_html = filter_input( INPUT_POST, 'escape_html' );
            if ( $escape_html && 1 == $escape_html ) {
                $reflected_xss['escape_html'] = 1;
            }

            update_option( 'prevent_xss_vulnerability_reflected_settings',
                $reflected_xss
            );
        }
    }

    /**
     * Reflected Settings Page
     *
     * @access private
     * @since 0.1
     *
     * @return void
     */
    private function xss_reflected_settings()
    {
        if ( ! current_user_can( 'administrator' ) )  {
            wp_die( esc_html__(
                'You do not have sufficient permissions to access this page.',
                'prevent-xss-vulnerability'
            ) );
        }

        $this->save_xss_reflected_settings();

        $filename   = 'admin-style' . $this->css_suffix;
        $plugin_url = plugins_url( '/admin', PREVENT_XSS_VULNERABILITY_FILE );
        $user_id    = get_current_user_id();
        $xss_nonce  = wp_nonce_field(
            'prevent-xss-vulnerability-reflected_' . $user_id,
            '_prevent_xss_vulnerability_reflected_nonce', true, false
        );
        $xss_settings = get_option( 'prevent_xss_vulnerability_reflected_settings' );

        wp_enqueue_style( 'style', $plugin_url . '/css/' . $filename );

        if ( is_string( $xss_settings ) ) {
            $xss_settings = unserialize( $xss_settings );
        }

        $enable_blocking         = '';
        $enable_encoding         = '';
        $escape_html             = '';
        $exclude_block_entities  = '';
        $exclude_encode_entities = '';

        if ( isset( $xss_settings['exclude_block_entities'] )
            && ! empty( $xss_settings['exclude_block_entities'] )
        ) {
            $exclude_block_entities = $xss_settings['exclude_block_entities'];
        }
        if ( isset( $xss_settings['enable_blocking'] )
          && 1 === $xss_settings['enable_blocking']
        ) {
            $enable_blocking = 'checked';
        }
        if ( isset( $xss_settings['exclude_encode_entities'] )
          && ! empty( $xss_settings['exclude_encode_entities'] )
        ) {
            $exclude_encode_entities = $xss_settings['exclude_encode_entities'];
        }
        if ( isset( $xss_settings['enable_encoding'] )
            && 1 === $xss_settings['enable_encoding']
        ) {
            $enable_encoding = 'checked';
        }

        if ( isset( $xss_settings['escape_html'] )
            && 1 === $xss_settings['escape_html']
        ) {
            $escape_html = 'checked';
        }

        $block_entities_output  = $this->get_block_entities_output(
            $exclude_block_entities, $enable_blocking
        );
        $encode_entities_output = $this->get_encode_entities_output(
            $exclude_encode_entities, $enable_encoding
        );
        $escape_output          = $this->get_escape_output( $escape_html );
        ?>

        <div class="wrap">
          <h2>
          <?php
            esc_html_e( 'Reflected Cross-site scripting(XSS) Settings', 'prevent-xss-vulnerability' );
          ?>
          </h2>
          <div>
            <p>
            <?php
              esc_html_e( 'Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. You can read more about XSS from', 'prevent-xss-vulnerability' );
            ?>
              <a href="https://www.yasglobal.com/cross-site-scripting-xss/" title="Cross-site Scripting (XSS)" target="_blank"><?php esc_html_e( 'here', 'prevent-xss-vulnerability' ); ?></a>.
            </p>
          </div>
          <table class="important">
            <tr>
              <td class="icon">
                <i class="fa icon icon-important" title="important">&nbsp;</i>
              </td>
              <td>
                <p>
                <?php
                  esc_html_e( 'After configuring the settings please check some pages randomly to verify that your site is working as expected.', 'prevent-xss-vulnerability' );
                ?>
                </p>
                <p>
                <?php
                  esc_html_e( 'If you are using WooCommerce, then in that case it is highly recommended to go through with all the steps of the Product Purchase (Cart, Checkout etc) to make sure that your online store is working fine.', 'prevent-xss-vulnerability' );
                ?>
                </p>
              </td>
            </tr>
          </table>
          <form enctype="multipart/form-data" action="" method="POST" id="reflected-xss">
            <?php
              echo $xss_nonce . $block_entities_output . $encode_entities_output .
                  $escape_output;
            ?>
            <p class="submit">
              <input type="submit" name="submit" id="submit" class="button button-primary" value="<?php esc_html_e( 'Save Changes', 'prevent-xss-vulnerability' ); ?>" />
            </p>
          </form>
        </div>
        <?php
    }
}
