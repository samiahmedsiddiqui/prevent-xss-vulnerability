<?php
/**
 * @package PreventXSSVulnerability
 */

class Prevent_XSS_Vulnerability_Self_Settings
{

    /**
     * Call Reflected Settings Function.
     */
    function __construct()
    {
        $this->self_xss_settings_page();
    }

    /**
     * Save Self XSS Settings
     *
     * @access private
     * @since 1.0.0
     *
     * @return void
     */
    private function save_self_xss_settings()
    {
        $form_submit = filter_input( INPUT_POST, 'submit' );
        $user_id     = get_current_user_id();

        if ( $form_submit
            && check_admin_referer(
                'prevent-xss-vulnerability-self_' . $user_id,
                '_prevent_xss_vulnerability_self_nonce'
            )
        ) {
            $self_xss = array(
                'warning_message' => '',
                'user_warning'    => 0,
            );

            $warning_message = filter_input( INPUT_POST, 'warning_message' );
            if ( $warning_message ) {
                $self_xss['warning_message'] = wp_kses( $warning_message, array() );
            }

            $self_enabled = filter_input( INPUT_POST, 'user_warning' );
            if ( $self_enabled && 1 == $self_enabled ) {
                $self_xss['user_warning'] = 1;
            }

            update_option( 'prevent_xss_vulnerability_self_xss_settings', $self_xss );
        }
    }

    /**
     * Self-XSS Settings Page
     *
     * @access private
     * @since 0.3.0
     *
     * @return void
     */
    private function self_xss_settings_page()
    {
        if ( ! current_user_can( 'administrator' ) ) {
            wp_die( esc_html_e(
                'You do not have sufficient permissions to access this page.',
                'prevent-xss-vulnerability'
            ) );
        }

        $this->save_self_xss_settings();

        $user_id      = get_current_user_id();
        $xss_settings = get_option( 'prevent_xss_vulnerability_self_xss_settings' );

        if ( is_string( $xss_settings ) ) {
            $xss_settings = unserialize( $xss_settings );
        }

        $warning_message = '';
        if ( isset( $xss_settings['warning_message'] )
            && ! empty( $xss_settings['warning_message'] )
        ) {
            $warning_message = $xss_settings['warning_message'];
        }

        $user_warning = '';
        if ( isset( $xss_settings['user_warning'] )
            && 1 === $xss_settings['user_warning']
        ) {
            $user_warning = 'checked';
        }
        ?>

        <div class="wrap">
          <h2>
          <?php
            esc_html_e( 'Self-XSS Settings', 'prevent-xss-vulnerability' );
          ?>
          </h2>
          <div>
            <p>
            <?php
              esc_html_e( 'Self-XSS is a social engineering attack used to gain control of victims\' web accounts. In a self-XSS attack, the victim of the attack unknowingly runs malicious code in their own web browser, thus exposing it to the attacker.', 'prevent-xss-vulnerability' );
            ?>
            </p>
          </div>
          <form enctype="multipart/form-data" action="" method="POST" id="reflected-xss">
            <?php
            wp_nonce_field(
                'prevent-xss-vulnerability-self_' . $user_id,
                '_prevent_xss_vulnerability_self_nonce', true
            );
            ?>
            <table class="prevent-xss reflected-xss">
              <caption>
              <?php
                esc_html_e( 'Warn users about self-XSS attacks', 'prevent-xss-vulnerability' );
              ?>
              </caption>
              <tbody>
                <tr>
                  <td>
                    <textarea name="warning_message" rows="5" cols="100"><?php esc_html_e( $warning_message ); ?></textarea>
                    <small>
                    <?php
                      esc_html_e( 'Add warning message when users open the web developer console. Leave empty to use default.', 'prevent-xss-vulnerability' );
                    ?>
                    </small>
                  </td>
                </tr>
                <tr>
                  <td class="enable">
                    <input type="checkbox" name="user_warning" value=1 <?php esc_html_e( $user_warning ); ?>/>
                    <strong>
                    <?php
                      esc_html_e( 'Enable User Warning', 'prevent-xss-vulnerability' );
                    ?>
                    </strong>
                  </td>
                </tr>
              </tbody>
            </table>

            <p class="submit">
              <input type="submit" name="submit" id="submit" class="button button-primary" value="<?php esc_html_e( 'Save Changes', 'prevent-xss-vulnerability' ); ?>" />
            </p>
          </form>
        </div>

        <?php
    }
}
